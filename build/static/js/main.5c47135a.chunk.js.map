{"version":3,"sources":["pop.wav","click.wav","components/Board.js","components/Colors.js","App.js","hooks/useBoard.js","serviceWorker.js","index.js"],"names":["module","exports","props","pxs","setPxs","colors","selected","fill","index","audio","Audio","pop","volume","play","array","window","location","hash","join","className","map","px","key","style","backgroundColor","onClick","onMouseEnter","event","shiftKey","setSelected","color","click","App","x","y","useState","length","split","Array","setColors","useBoard","replace","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iGAAAA,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,0OCI5B,WAAUC,GAAQ,IACvBC,EAAkCD,EAAlCC,IAAKC,EAA6BF,EAA7BE,OAAQC,EAAqBH,EAArBG,OAAQC,EAAaJ,EAAbI,SAEvBC,EAAO,SAACC,GACZ,IAAMC,EAAQ,IAAIC,MAAMC,KACxBF,EAAMG,OAAS,KACfH,EAAMI,OACN,IAAMC,EAAK,YAAOX,GAClBW,EAAMN,GAASF,EACfF,EAAOU,GACPC,OAAOC,SAASC,KAAOH,EAAMI,KAAK,IAClCT,EAAMI,QAGR,OACE,yBAAKM,UAAU,SACZhB,EAAIiB,KAAI,SAACC,EAAIb,GAAL,OACP,yBACEc,IAAG,eAAUd,GACbW,UAAU,mBACVI,MAAO,CAAEC,gBAAiBnB,EAAOgB,IACjCI,QAAS,kBAAMlB,EAAKC,IACpBkB,aAAc,SAACC,GACTA,EAAMC,UACRrB,EAAKC,W,gBCxBJ,G,MAAA,SAAUN,GAAQ,IACvBG,EAAkCH,EAAlCG,OAAQC,EAA0BJ,EAA1BI,SAAUuB,EAAgB3B,EAAhB2B,YAC1B,OACE,yBAAKV,UAAU,UACZd,EAAOe,KAAI,SAACU,EAAOtB,GAAR,OACV,yBACEc,IAAG,gBAAWd,GACdW,UAAS,2BAAsBX,IAAUF,GAAY,YACrDmB,QAAS,WACP,IAAMhB,EAAQ,IAAIC,MAAMqB,KACxBtB,EAAMG,OAAS,KACfH,EAAMI,OACNgB,EAAYrB,IAEde,MAAO,CAAEC,gBAAiBM,WCKrBE,MAjBf,WAAgB,IAAD,ECJA,SAAUC,EAAGC,EAAGjB,GAAO,IAAD,EACbkB,mBAASlB,GAAwB,MAAhBA,EAAKmB,OAAiBnB,EAAKoB,MAAM,IAAMC,MAAML,EAAIC,GAAG3B,KAAK,IAD7D,mBAC5BJ,EAD4B,KACvBC,EADuB,OAEP+B,mBAAS,CACnC,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAViC,mBAE5B9B,EAF4B,KAEpBkC,EAFoB,OAYHJ,mBAAS,GAZN,mBAanC,MAAO,CAAEhC,MAAKC,SAAQC,SAAQkC,YAAWjC,SAbN,KAagBuB,YAbhB,MDKoBW,CACrD,GACA,GACAzB,OAAOC,SAASC,KAAOF,OAAOC,SAASC,KAAKwB,QAAQ,IAAK,IAAM,MAHzDtC,EADK,EACLA,IAAKC,EADA,EACAA,OAAQC,EADR,EACQA,OAAQC,EADhB,EACgBA,SAAUuB,EAD1B,EAC0BA,YAKvC,OACE,yBAAKV,UAAU,OACb,4BACE,iCADF,QAGA,kBAAC,EAAD,CAAOf,OAAQA,EAAQD,IAAKA,EAAKE,OAAQA,EAAQC,SAAUA,IAC3D,kBAAC,EAAD,CAAQD,OAAQA,EAAQC,SAAUA,EAAUuB,YAAaA,MEN3Ca,QACW,cAA7B3B,OAAOC,SAAS2B,UAEe,UAA7B5B,OAAOC,SAAS2B,UAEhB5B,OAAOC,SAAS2B,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5c47135a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pop.9f6c9dfe.wav\";","module.exports = __webpack_public_path__ + \"static/media/click.6d228f29.wav\";","import React from 'react';\nimport './Board.css';\nimport pop from '../pop.wav';\n\nexport default function (props) {\n  const { pxs, setPxs, colors, selected } = props;\n\n  const fill = (index) => {\n    const audio = new Audio(pop);\n    audio.volume = 0.025;\n    audio.play();\n    const array = [...pxs];\n    array[index] = selected;\n    setPxs(array);\n    window.location.hash = array.join('');\n    audio.play();\n  };\n\n  return (\n    <div className=\"Board\">\n      {pxs.map((px, index) => (\n        <div\n          key={`tile-${index}`}\n          className=\"selectable block\"\n          style={{ backgroundColor: colors[px] }}\n          onClick={() => fill(index)}\n          onMouseEnter={(event) => {\n            if (event.shiftKey) {\n              fill(index);\n            }\n          }}\n        ></div>\n      ))}\n    </div>\n  );\n}\n","import React from 'react';\nimport click from '../click.wav';\nimport './Colors.css';\n\nexport default function (props) {\n  const { colors, selected, setSelected } = props;\n  return (\n    <div className=\"Colors\">\n      {colors.map((color, index) => (\n        <div\n          key={`color-${index}`}\n          className={`selectable block ${index === selected && 'selected'}`}\n          onClick={() => {\n            const audio = new Audio(click);\n            audio.volume = 0.025;\n            audio.play();\n            setSelected(index);\n          }}\n          style={{ backgroundColor: color }}\n        ></div>\n      ))}\n    </div>\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport useBoard from './hooks/useBoard';\nimport Board from './components/Board';\nimport Colors from './components/Colors';\n\nfunction App() {\n  const { pxs, setPxs, colors, selected, setSelected } = useBoard(\n    16,\n    16,\n    window.location.hash ? window.location.hash.replace('#', '') : null\n  );\n  return (\n    <div className=\"App\">\n      <h1>\n        <b>PX</b> ART\n      </h1>\n      <Board setPxs={setPxs} pxs={pxs} colors={colors} selected={selected} />\n      <Colors colors={colors} selected={selected} setSelected={setSelected} />\n    </div>\n  );\n}\n\nexport default App;\n","import { useState } from 'react';\n\nexport default function (x, y, hash) {\n  const [pxs, setPxs] = useState(hash && hash.length === 256 ? hash.split('') : Array(x * y).fill(0));\n  const [colors, setColors] = useState([\n    '#FFFFFF',\n    '#000000',\n    '#DF0101',\n    '#B45F04',\n    '#AEB404',\n    '#04B404',\n    '#0431B4',\n    '#8904B1',\n  ]);\n  const [selected, setSelected] = useState(0);\n  return { pxs, setPxs, colors, setColors, selected, setSelected};\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}